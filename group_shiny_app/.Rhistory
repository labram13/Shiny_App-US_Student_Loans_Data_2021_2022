## In this section, we'll read in a .csv file, which is essentially a tabular row/column layout
## The .csv file we'll be working with has the life expectancy for each country in 1960 and 2013.
## We'll ask real-world questions about the data by writing the code that answers our question.
## Here are the steps you should walk through:
## ---------- loading data
## Using the `read_csv` function in 'readr' package,
## read the file life-expectancy.csv
## into R.  Assign it to a suitably named variable.
## Use _relative path_ for loading it!
library(readr)
life_expectancy <- read_csv("info201/info201-lab01-winter/PS/ps3-data-nathanielsayasack/data/life-expectancy.csv")
## Determine that the results is a data.frame by using the
## 'is.data.frame' function.
is.data.frame(life_expectancy)
## ---------- inspecting data
## How many rows and columns does the dataset contain?
dim(life_expectancy)
## Print a few first lines of data.
head(life_expectancy, 7)
## Print a few last lines of data.
tail(life_expectancy, 7)
## The lines your printed should look like a dataset
## with text, numbers, and maybe a few missing values.
## It should not look carbled or empty
## Do the printed look good?  (answer in comments)
## Yes, it looks good
## ---------- analyzing data
## Create a new suitably named variable in the dataset--
## the difference in life expectancy (LE) between 2013 and 1960
## What is the average improvement in LE over
## these years?
## Which country gained most in terms of LE?
## How many countries were there where LE
## improved less than 5 years?
## How many countries were there were LE decreased
## over this time period?
## Write a function `countryChange` that takes in a country's
## name as argument,
## and returns it's change in LE from 1960 to 2013
## Using your function, show how much did LE improve in
## Sweden, Yemen, Pakistan.
## How many regions are there in data?  Which regions are those?
## What was average LE in 'Europe & Central Asia' in 1960?
## How much did LE improve in "South Asia" in average?
## write a function 'regionChange' that takes
## the name of a region as argument, and returns average LE
## in that region (as of 2013)
## Show that it works for 'Europe & Central Asia'
## Write a loop over all regions and print the region name
## together with the average life expectancy there.
## Demonstrate that your function works correctly using the
## China/Bolivia example
## Compare the LE changes of a few more pairs of countries
## at your choice.
## Save your life expectancy data to a new .csv file
## in the data/ directory
## with the filename `life-expectancy-with-change.csv`.
## use _relative path_ !
## ---------- challenge
## Create a *well labeled* plot (readable title, x-axis, y-axis) showing Life expectancy
## in 1960 v.s. Change in life expectancy Programmatically save (i.e., with code, not
## using the Export button) your graph as a .png file in your repo Then, in a comment
## below, provide an *interpretation* of the relationship you observe Feel free to use
## any library of your choice, or base R plotting functions.
## What do you notice?
## What is your interpretation of the observed relationship?
##
## We see a negative relationship
## Interpretation: this is global convergence in life expectancy.
## countries with a higher life expectancy in 1960 had a lower
## Change in life expectancy.  Perhaps humans can't live that long
## (or it's easier increase life expectancy from 50 to 70 than 70 to 90)
## Write a function `compareChange` that takes in two country
## names as parameters, and
## prints (not returns) a sentence that describes which country had
## a larger gain in LE (and by how many years).
## For example, if you passed the values "China",
## and "Bolivia" into your function, it would print this:
##
## Out of China and Bolivia, China gained 7.4 years more in
## life expectancy (31.9 and 24.5 years respectively).
##
## Make sure to round your numbers: check out function `round()`
## Demonstrate that your function works correctly using the
## China/Bolivia example
## Compare the LE changes of a few more pairs of countries
## at your choice.
life_expectancy$difference_LE <- life_expectancy$le_2013 - life_expectancy$le_1960
mean(life_expectancy$difference_LE)
print(life_expectancy[which.max(life.expectancy$difference_LE),])
print(life_expectancy[which.max(life_expectancy$difference_LE),])
sum(life_expectancy$difference_LE<5, na.rm=TRUE)
sum(life_expectancy$difference_LE<0, na.rm=TRUE)
countryChange <- function(y){
return(life_expectancy[life_expectancy$country == y, "difference_LE"])
}
countryChange("Sweden")
countryChange("Yemen, Rep.")
countryChange("Pakistan")
cat("There are ", length(unique(life.expectancy$region)),"regions in the data.","\n")
unique(life.expectancy$region)
cat("There are ", length(unique(life_expectancy$region)),"regions in the data.","\n")
unique(life_expectancy$region)
for (region_name in unique(life_expectancy$region)){
cat(region_name,"average life expectancy:", regionChange(region_name), "\n")
}
for (region_name in unique(life_expectancy$region)){
cat(region_name,"average life expectancy:", regionChange(region_name), "\n")
}
for (region_name in unique(life_expectancy$region)){
source('~/info201/info201-lab01-winter/PS/ps3-data-nathanielsayasack/assignment.R')
source('~/info201/info201-lab01-winter/PS/ps3-data-nathanielsayasack/assignment.R')
source('~/info201/info201-lab01-winter/PS/ps3-data-nathanielsayasack/assignment.R')
### ========== a3-data ==========
## Before you get started, make sure to set you are in the right working directory.
## Print your working directory (in R, not in shell!) here.
## -------------------- create your own data! --------------------
## Here your task is to create a dataset of student grades,
## and do some related computeations
## ---------- create data
## Create a vector `names` with (at least) 5 names in it
names <- c("Liam","Olivia","Noah","Emma","Oliver")
print(names)
## Create a vector `math` with grades (0 - 100)
math <- c("66","57","69","100","85")
## in a math course, one grade for each student.
## Hint: you can just invent these numbers, but you can also
## create random data, e.g. by `sample(100, 5, replace=TRUE)`
## (Check out documentation yourself).
## Create a vector `japanese` with grades for the Japanese course
## (use different numbers, not exactly the same as for math)
japanese <- c("76","52","98","83","82")
## Create a similar vector 'dance' with grades for a dance class
dance <- c("72","88","67","92","77")
## Create a data frame `grades` by combining your
## names, and math, Japanese and dance grades
grades <- data.frame(names, math, japanese, dance)
## Compute the number of students in your data
grades$names
nrow(grades)
## Compute number of courses in data--
ncol(grades)
## number columns in your data minus one
## (b/c of their names)
ncol(grades)-1
## Print the last two lines of your data
tail(grades,2)
## Save your students to a new .csv file inside your data/
## directory with the filename `grades.csv`.
## You can save either as comma-separated or as tab-separated.
## We recommend to use `write_tsv` and `write_csv` functions
## from readr library.
## use _relative path_ for saving!
library(readr)
write_csv("info201/info201-lab01-winter/PS/ps3-data-nathanielsayasack/data/grades.csv")
## ---------- data manipulations
## Compute GPA (math + Japanese + dance)/3 for each student
## Use vectorized operations, not loops!
## Save it as variable 'gpa' in your data frame.
gpa <- (grades$japanese + grades$math + grades$dance)/3
gpa
## Who has the best GPA?  Print that line of your data!
## Now print only the best student's name
## Now print your data.  Did you get the name right?
## Compute variable that is TRUE/FALSE,
## depending on if the student better at math than in Japanese
## Pick a suitable variable name yourself.
## Show three lines of your data that includes the new variable.
## How many students are there in your data who are better at math
## than in Japanese?
## ---------- Indirect variable names
## create a variable 'col' that contains name of one of the courses
## -- dance.
col <- "dance"
## Print your dance grades using the variable 'col'.
## Do not use the word "dance" here!
grades[[col]]
## Now assign name of another course to 'col' and print
## the best grade in that course!
col <- japanese
max(japanese)
## Now write a for-loop over all columns in the data frame
## Inside of the loop, print the name of the variable,
## and its average value
## Hint: you cannot compute average 'name', add an if-else
## statement there that checks if variable is numeric and only print
## average if it is (check out `is.numeric()`).
for(x in grades){
if(is.numeric(x)){
print(mean(x))
}
else{
print(x)
}
}
### ------------------------------ Life expectancy ------------------------------
## In this section, we'll read in a .csv file, which is essentially a tabular row/column layout
## The .csv file we'll be working with has the life expectancy for each country in 1960 and 2013.
## We'll ask real-world questions about the data by writing the code that answers our question.
## Here are the steps you should walk through:
## ---------- loading data
## Using the `read_csv` function in 'readr' package,
## read the file life-expectancy.csv
## into R.  Assign it to a suitably named variable.
## Use _relative path_ for loading it!
library(readr)
life_expectancy <- read_csv("info201/info201-lab01-winter/PS/ps3-data-nathanielsayasack/data/life-expectancy.csv")
## Determine that the results is a data.frame by using the
## 'is.data.frame' function.
is.data.frame(life_expectancy)
## ---------- inspecting data
## How many rows and columns does the dataset contain?
dim(life_expectancy)
## Print a few first lines of data.
head(life_expectancy, 7)
## Print a few last lines of data.
tail(life_expectancy, 7)
## The lines your printed should look like a dataset
## with text, numbers, and maybe a few missing values.
## It should not look carbled or empty
## Do the printed look good?  (answer in comments)
## Yes, it looks good
## ---------- analyzing data
## Create a new suitably named variable in the dataset--
## the difference in life expectancy (LE) between 2013 and 1960
life_expectancy$difference_LE <- life_expectancy$le_2013 - life_expectancy$le_1960
## What is the average improvement in LE over
## these years?
mean(life_expectancy$difference_LE)
## Which country gained most in terms of LE?
print(life_expectancy[which.max(life_expectancy$difference_LE),])
## How many countries were there where LE
## improved less than 5 years?
sum(life_expectancy$difference_LE<5, na.rm=TRUE)
## How many countries were there were LE decreased
## over this time period?
sum(life_expectancy$difference_LE<0, na.rm=TRUE)
## Write a function `countryChange` that takes in a country's
## name as argument,
## and returns it's change in LE from 1960 to 2013
countryChange <- function(y){
return(life_expectancy[life_expectancy$country == y, "difference_LE"])
}
## Using your function, show how much did LE improve in
## Sweden, Yemen, Pakistan.
countryChange("Sweden")
countryChange("Yemen, Rep.")
countryChange("Pakistan")
## How many regions are there in data?  Which regions are those?
cat("There are ", length(unique(life_expectancy$region)),"regions in the data.","\n")
unique(life_expectancy$region)
## What was average LE in 'Europe & Central Asia' in 1960?
mean(life_expectancy$le_1960[life_expectancy$region == "Europe & Central Asia"])
## How much did LE improve in "South Asia" in average?
mean(life_expectancy$difference_LE[life_expectancy$region == "South Asia"])
## write a function 'regionChange' that takes
## the name of a region as argument, and returns average LE
## in that region (as of 2013)
## Show that it works for 'Europe & Central Asia'
regionChange <- function(region){
return (mean(life_expectancy$le_2013[life_expectancy$region == region]))
}
regionChange("Europe & Central Asia")
## Write a loop over all regions and print the region name
## together with the average life expectancy there.
for (region_name in unique(life_expectancy$region)){
cat(region_name,"average life expectancy:", regionChange(region_name), "\n")
}
## Demonstrate that your function works correctly using the
## China/Bolivia example
## Compare the LE changes of a few more pairs of countries
## at your choice.
## Save your life expectancy data to a new .csv file
## in the data/ directory
## with the filename `life-expectancy-with-change.csv`.
## use _relative path_ !
## ---------- challenge
## Create a *well labeled* plot (readable title, x-axis, y-axis) showing Life expectancy
## in 1960 v.s. Change in life expectancy Programmatically save (i.e., with code, not
## using the Export button) your graph as a .png file in your repo Then, in a comment
## below, provide an *interpretation* of the relationship you observe Feel free to use
## any library of your choice, or base R plotting functions.
## What do you notice?
## What is your interpretation of the observed relationship?
##
## We see a negative relationship
## Interpretation: this is global convergence in life expectancy.
## countries with a higher life expectancy in 1960 had a lower
## Change in life expectancy.  Perhaps humans can't live that long
## (or it's easier increase life expectancy from 50 to 70 than 70 to 90)
## Write a function `compareChange` that takes in two country
## names as parameters, and
## prints (not returns) a sentence that describes which country had
## a larger gain in LE (and by how many years).
## For example, if you passed the values "China",
## and "Bolivia" into your function, it would print this:
##
## Out of China and Bolivia, China gained 7.4 years more in
## life expectancy (31.9 and 24.5 years respectively).
##
## Make sure to round your numbers: check out function `round()`
## Demonstrate that your function works correctly using the
## China/Bolivia example
## Compare the LE changes of a few more pairs of countries
## at your choice.
### ========== a3-data ==========
## Before you get started, make sure to set you are in the right working directory.
## Print your working directory (in R, not in shell!) here.
## -------------------- create your own data! --------------------
## Here your task is to create a dataset of student grades,
## and do some related computeations
## ---------- create data
## Create a vector `names` with (at least) 5 names in it
names <- c("Liam","Olivia","Noah","Emma","Oliver")
print(names)
## Create a vector `math` with grades (0 - 100)
math <- c("66","57","69","100","85")
## in a math course, one grade for each student.
## Hint: you can just invent these numbers, but you can also
## create random data, e.g. by `sample(100, 5, replace=TRUE)`
## (Check out documentation yourself).
## Create a vector `japanese` with grades for the Japanese course
## (use different numbers, not exactly the same as for math)
japanese <- c("76","52","98","83","82")
## Create a similar vector 'dance' with grades for a dance class
dance <- c("72","88","67","92","77")
## Create a data frame `grades` by combining your
## names, and math, Japanese and dance grades
grades <- data.frame(names, math, japanese, dance)
## Compute the number of students in your data
grades$names
nrow(grades)
## Compute number of courses in data--
ncol(grades)
## number columns in your data minus one
## (b/c of their names)
ncol(grades)-1
## Print the last two lines of your data
tail(grades,2)
## Save your students to a new .csv file inside your data/
## directory with the filename `grades.csv`.
## You can save either as comma-separated or as tab-separated.
## We recommend to use `write_tsv` and `write_csv` functions
## from readr library.
## use _relative path_ for saving!
library(readr)
write_csv("info201/info201-lab01-winter/PS/ps3-data-nathanielsayasack/data/grades.csv")
## ---------- data manipulations
## Compute GPA (math + Japanese + dance)/3 for each student
## Use vectorized operations, not loops!
## Save it as variable 'gpa' in your data frame.
gpa <- (grades$japanese + grades$math + grades$dance)/3
gpa
## Who has the best GPA?  Print that line of your data!
## Now print only the best student's name
## Now print your data.  Did you get the name right?
## Compute variable that is TRUE/FALSE,
## depending on if the student better at math than in Japanese
## Pick a suitable variable name yourself.
## Show three lines of your data that includes the new variable.
## How many students are there in your data who are better at math
## than in Japanese?
## ---------- Indirect variable names
## create a variable 'col' that contains name of one of the courses
## -- dance.
col <- "dance"
## Print your dance grades using the variable 'col'.
## Do not use the word "dance" here!
grades[[col]]
## Now assign name of another course to 'col' and print
## the best grade in that course!
col <- japanese
max(japanese)
## Now write a for-loop over all columns in the data frame
## Inside of the loop, print the name of the variable,
## and its average value
## Hint: you cannot compute average 'name', add an if-else
## statement there that checks if variable is numeric and only print
## average if it is (check out `is.numeric()`).
for(x in grades){
if(is.numeric(x)){
print(mean(x))
}
else{
print(x)
}
}
### ------------------------------ Life expectancy ------------------------------
## In this section, we'll read in a .csv file, which is essentially a tabular row/column layout
## The .csv file we'll be working with has the life expectancy for each country in 1960 and 2013.
## We'll ask real-world questions about the data by writing the code that answers our question.
## Here are the steps you should walk through:
## ---------- loading data
## Using the `read_csv` function in 'readr' package,
## read the file life-expectancy.csv
## into R.  Assign it to a suitably named variable.
## Use _relative path_ for loading it!
library(readr)
life_expectancy <- read_csv("info201/info201-lab01-winter/PS/ps3-data-nathanielsayasack/data/life-expectancy.csv")
## Determine that the results is a data.frame by using the
## 'is.data.frame' function.
is.data.frame(life_expectancy)
## ---------- inspecting data
## How many rows and columns does the dataset contain?
dim(life_expectancy)
## Print a few first lines of data.
head(life_expectancy, 7)
## Print a few last lines of data.
tail(life_expectancy, 7)
## The lines your printed should look like a dataset
## with text, numbers, and maybe a few missing values.
## It should not look carbled or empty
## Do the printed look good?  (answer in comments)
## Yes, it looks good
## ---------- analyzing data
## Create a new suitably named variable in the dataset--
## the difference in life expectancy (LE) between 2013 and 1960
life_expectancy$difference_LE <- life_expectancy$le_2013 - life_expectancy$le_1960
## What is the average improvement in LE over
## these years?
mean(life_expectancy$difference_LE)
## Which country gained most in terms of LE?
print(life_expectancy[which.max(life_expectancy$difference_LE),])
## How many countries were there where LE
## improved less than 5 years?
sum(life_expectancy$difference_LE<5, na.rm=TRUE)
## How many countries were there were LE decreased
## over this time period?
sum(life_expectancy$difference_LE<0, na.rm=TRUE)
## Write a function `countryChange` that takes in a country's
## name as argument,
## and returns it's change in LE from 1960 to 2013
countryChange <- function(y){
return(life_expectancy[life_expectancy$country == y, "difference_LE"])
}
## Using your function, show how much did LE improve in
## Sweden, Yemen, Pakistan.
countryChange("Sweden")
countryChange("Yemen, Rep.")
countryChange("Pakistan")
## How many regions are there in data?  Which regions are those?
cat("There are ", length(unique(life_expectancy$region)),"regions in the data.","\n")
unique(life_expectancy$region)
## What was average LE in 'Europe & Central Asia' in 1960?
mean(life_expectancy$le_1960[life_expectancy$region == "Europe & Central Asia"])
## How much did LE improve in "South Asia" in average?
mean(life_expectancy$difference_LE[life_expectancy$region == "South Asia"])
## write a function 'regionChange' that takes
## the name of a region as argument, and returns average LE
## in that region (as of 2013)
## Show that it works for 'Europe & Central Asia'
regionChange <- function(region){
return (mean(life_expectancy$le_2013[life_expectancy$region == region]))
}
regionChange("Europe & Central Asia")
## Write a loop over all regions and print the region name
## together with the average life expectancy there.
for (region_name in unique(life_expectancy$region)){
cat(region_name,"average life expectancy:", regionChange(region_name), "\n")
}
## Demonstrate that your function works correctly using the
## China/Bolivia example
## Compare the LE changes of a few more pairs of countries
## at your choice.
## Save your life expectancy data to a new .csv file
## in the data/ directory
## with the filename `life-expectancy-with-change.csv`.
## use _relative path_ !
## ---------- challenge
## Create a *well labeled* plot (readable title, x-axis, y-axis) showing Life expectancy
## in 1960 v.s. Change in life expectancy Programmatically save (i.e., with code, not
## using the Export button) your graph as a .png file in your repo Then, in a comment
## below, provide an *interpretation* of the relationship you observe Feel free to use
## any library of your choice, or base R plotting functions.
## What do you notice?
## What is your interpretation of the observed relationship?
##
## We see a negative relationship
## Interpretation: this is global convergence in life expectancy.
## countries with a higher life expectancy in 1960 had a lower
## Change in life expectancy.  Perhaps humans can't live that long
## (or it's easier increase life expectancy from 50 to 70 than 70 to 90)
## Write a function `compareChange` that takes in two country
## names as parameters, and
## prints (not returns) a sentence that describes which country had
## a larger gain in LE (and by how many years).
## For example, if you passed the values "China",
## and "Bolivia" into your function, it would print this:
##
## Out of China and Bolivia, China gained 7.4 years more in
## life expectancy (31.9 and 24.5 years respectively).
##
## Make sure to round your numbers: check out function `round()`
## Demonstrate that your function works correctly using the
## China/Bolivia example
## Compare the LE changes of a few more pairs of countries
## at your choice.
cat("There are ", length(unique(life_expectancy$region)),"regions in the data.","\n")
unique(life_expectancy$region)
nyc_data %>%
summarise(dest == TRUE) %>%
count()
shiny::runApp('info201/info201-lab01-winter/Finalp/info201_group_project_BD2/group_shiny_app')
runApp('info201/info201-lab01-winter/Finalp/info201_group_project_BD2/group_shiny_app')
runApp('info201/info201-lab01-winter/Finalp/info201_group_project_BD2/group_shiny_app')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
